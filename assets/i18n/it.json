{
  "topbar.title": "PORTFOLIO di Alessandro De Prato",

  "profile.header": "Profilo professionale",
  "profile.details.line1": "Fin da giovane età ho costruito attorno alla programmazione un percorso di studio e poi una carriera, sfruttando rapidità d’apprendimento, volontà di crescere, passione autentica e attenzione al dettaglio.",
  "profile.details.line2": "Mi impegno a scrivere codice leggibile, scalabile e ben documentato: è il primo strumento di comunicazione tra programmatori. Ogni riga scritta con chiarezza facilita la manutenzione, riduce la complessità e rende il sistema più solido nel tempo.",
  "profile.details.line3": "Lavoro con efficacia in team distribuiti e internazionali, adottando metodologie agili. In contesti Scrum mi concentro su obiettivi chiari, feedback continui e pratiche condivise.",

  "curriculum.header": "Curriculum",
  "curriculum.details": "Scarica il mio curriculum in formato PDF:",

  "contacts.header": "Contatti",
  "contacts.details": "Sono disponibile ai seguenti recapiti:",
  "contacs.email": "Email:",
  "contacs.mobile": "Cellulare:",

  "projects.header": "Progetti rilevanti",
  "projects.details": "I progetti inclusi nel portfolio rappresentano una selezione delle esperienze più significative e delle competenze acquisite nel corso della carriera. Espandi gli accordion per maggiori informazioni. Puoi vederli in esecuzione cliccando sul Live link!",
  "projects.disclaimer": "I progetti live sono ospitati su Render con piano gratuito. A causa delle risorse limitate, il primo caricamento potrebbe richiedere uno o due refresh per visualizzare correttamente i dati. Grazie per la pazienza!",

  "projects.readme": "File readme:",
  "projects.repo": "Repository GitHub:",
  "projects.live": "Esecuzione live:",
  "projects.technologies": "Tecnologie coinvolte:",
  "projects.description": "Descrizione:",
  "projects.note": "NOTA:",
  "projects.technicalNotes": "Note tecniche",

  "project1.name": "Contesto applicativo: ToDoList",
  "project1.description.short": "Introduzione al sistema multiutente di gestione attività e agli obiettivi ingegneristici del portfolio.",
  "project1.description.line1": "Il portfolio ruota attorno alla realizzazione di un sistema di gestione attività condivise, pensato per supportare più utenti e flussi di lavoro collaborativi. Lo scenario applicativo è quello di una ToDoList evoluta, in cui ogni attività può attraversare stati distinti e coinvolgere più attori, con logiche di visualizzazione e filtro dinamiche.",
  "project1.description.line2": "I progetti inclusi esplorano diverse soluzioni architetturali e tecnologie, con l’obiettivo di confrontare approcci e garantire coerenza tra frontend e backend. L’intero percorso è stato concepito come esercizio ingegneristico, con attenzione alla modularità, alla manutenibilità e alla chiarezza del codice.",

  "project2.name": "Modello dati e struttura relazionale",
  "project2.description.short": "Schema relazionale con entità utente e attività, e gestione degli stati.",
  "project2.description.line1": "Il sistema si basa su due entità principali: User e Task, collegate da una relazione uno-a-molti tramite il campo assigneeId. Ogni utente può trovarsi in uno stato tra ACTIVE e BLOCKED, mentre gli stati previsti per le attività sono: TODO, IN PROGRESS, PAUSED, DONE.",
  "project2.description.line2": "La struttura è pensata per supportare flussi collaborativi e filtraggio dinamico, con vincoli di integrità referenziale e gestione automatica delle chiavi primarie.",
  "project2.description.line3": "Il database è implementato in PostgreSQL e rappresenta la base condivisa per tutte le varianti frontend e backend del progetto.",

  "project3.name": "Libreria UI condivisa",
  "project3.description.short": "Componenti, stili e logiche riutilizzabili per frontend coerenti e modulari.",
  "project3.description.line1": "Il progetto UI Kit fornisce una libreria condivisa di componenti React, stili globali e tipi TypeScript, utilizzata dall'Implementazione del frontend in Next.js e dalla validazione con Storybook.",
  "project3.description.line2": "Include una suite di hooks per la gestione della lingua, del tema, della visibilità responsive e della validazione dei campi, garantendo comportamenti uniformi e configurabili. Il sistema di validazione centralizzato consente feedback coerenti su tutti i controlli e disabilitazione automatica dei salvataggi, con regole personalizzabili e messaggi contestuali.",

  "project4.name": "Ambiente Storybook per test e documentazione UI",
  "project4.description.short": "Visualizzazione interattiva e validazione dei componenti condivisi.",
  "project4.description.line1": "Storybook funge da ambiente di validazione per layout, accessibilità e coerenza visiva, facilitando il confronto diretto tra designer e sviluppatori. Genera inoltre una dettagliata documentazione relativa all'utilizzo dei componenti.",
  "project4.description.line2": "Le storie interattive permettono di esplorare ogni componente in isolamento, testando comportamenti, varianti e edge case in modo completo e controllato.",
  "project4.note1": "Per garantire la compatibilità tra workspace e plugin Storybook, il progetto utilizza Yarn 1.22.19 con shim locale. L’adozione è stata necessaria a causa di limiti strutturali di npm e incompatibilità critiche con Yarn Berry (v2+), che impedivano la risoluzione corretta delle dipendenze e il linking tra moduli. Il lock esplicito assicura stabilità nei flussi di build e sviluppo.",

  "project5.name": "Implementazione frontend Next.js",
  "project5.description.short": "Applicazione multilingua e tematizzabile per la gestione utenti e attività.",
  "project5.description.line1": "L’interfaccia Next.js offre una gestione completa dei utenti e task, con creazione, modifica, eliminazione e controllo di ruoli e stati. Il sistema di validazione avanzata impedisce transizioni non consentite, come l’assegnazione di task IN PROGRESS a utenti bloccati.",
  "project5.description.line2": "Il tema è personalizzabile (chiaro, scuro, custom) e la lingua può essere cambiata dinamicamente tra italiano e inglese. L’app utilizza un UI Kit condiviso con componenti riutilizzabili, hooks e provider per garantire coerenza visiva e comportamentale.",
  "project5.description.line3": "Il frontend è integrato con Redux Toolkit e TanStack Query per una gestione efficiente dello stato e delle chiamate asincrone.",
  "project5.note1": "La logica di filtro è gestita tramite Redux Toolkit, e vi sono validazioni integrate che impediscono l’avanzamento di un task se l’assegnatario è bloccato.",
  "project5.note2": "La compatibilità con Storybook è garantita dallo stesso shim locale di Yarn 1.22.19, necessario per mantenere coerenza tra ambienti e tool condivisi.",

  "project6.name": "Implementazione frontend AngularJS + Redux",
  "project6.description.short": "Interfaccia frontend realizzata con AngularJS e Redux-classic.",
  "project6.description.line1": "Il frontend AngularJS implementa una TodoList con doppio sistema di filtraggio: lato server per dataset estesi e lato client via Redux Classic. L’interfaccia è costruita con Bootstrap e SCSS, offrendo una tematizzazione semplice e una struttura visiva reattiva.",
  "project6.description.line2": "Il progetto è antecedente alla versione Next.js, per la quale è stato introdotto lo sato PAUSED. Per mantenere la compatibità col workflow iniziale, tutti i task in questo stato verranno visualizzati come IN PROGRESS.",
  "project6.note1": "Per abilitare un caching nell'applicazione dei filtri è stato introdotto Redux-classic per il mantenimento dello stato in linea con le applicazioni React.",
  "project6.note2": "Per riutilizzare il codice delle modali, si ha inserito direttamente il codice HTML del contenuto all'interno del tag, seguendo un approccio simile a quello utilizzato in React con la proprietà $children per popolare il contenuto.",

  "project7.name": "Implementazione del backend .NET",
  "project7.description.short": "Strato API per la gestione di un database minimale con entità User e Task. Accessibile tramite Swagger.",
  "project7.description.line1": "Implementazione minimale con ASP.NET delle API necessarie al funzionamento del progetto TodoList, documentazione e test ottenibili sulla pagina Swagger.",
  "project7.description.line2": "Lo scaffolding è stato realizzato con Entity Framework a partire dal database e comprende le entità User e Task, fornendo i metodi necessari ad eseguirvi le operazioni CRUD.",
  "project7.description.line3": "Per la ricerca dei Task si ha previsto la possibilità di cercare la descrizione in like, restringere a quelli assegnati ad un certo utente ed indicare in un array gli stati che si vuol visualizzare. Analoghi filtri sono stati predisposti per gli utenti.",

  "project8.name": "Implementazione Portfolio",
  "project8.description.short": "Informazioni e curiosità sullo sviluppo di questo stesso sito.",
  "project8.description.line1": "Il portfolio è stato generato riutilizzando il codice del frontend legacy scritto con AngularJS. Le tecnologie coinvolte sono limitate ad HTML, Bootstrap, SCSS, oltre a una bella dose di vanilla JavaScript.",
  "project8.description.line2": "Sin dal principio si è adottato un approccio mobile-first, progettando due layout intercambiati da una media query per ottenere la visualizzazione ottimale a seconda del viewport. Questo sistema, testato con soddisfazione per la sezione Profile, è stato inizialmente adottato anche per l'implementazione dei progetti, al tempo limitati a be-csharp e fe-angularjs.",
  "project8.description.line3": "Quando si è dovuto integrare i nuovi progetti, è apparso evidente che mantenere una simile duplicazione HTML si sarebbe tradotto in un incubo manutentivo. Si è adottato quindi un approccio algoritmico, delegando a JavaScript l'iniezione degli elementi mediante la manipolazione diretta del DOM."
}
