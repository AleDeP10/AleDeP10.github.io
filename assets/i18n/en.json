{
  "topbar.title": "PORTFOLIO of Alessandro De Prato",

  "profile.header": "Professional Profile",
  "profile.details.line1": "Since an early age, I’ve built a path around programming, first through study and then as a career, leveraging fast learning, a genuine passion, and strong attention to detail.",
  "profile.details.line2": "I strive to write code that is readable, scalable, and well-documented: it’s the primary tool for communication between developers. Every clear line eases maintenance, reduces complexity, and strengthens the system over time.",
  "profile.details.line3": "I work effectively in distributed and international teams, embracing agile methodologies. In Scrum environments, I focus on clear goals, continuous feedback, and shared practices.",

  "curriculum.header": "Curriculum",
  "curriculum.details": "Download my resume in PDF format:",

  "contacts.header": "Contacts",
  "contacts.details": "You can reach me at the following contacts:",
  "contacs.email": "Email:",
  "contacs.mobile": "Mobile:",

  "projects.header": "Relevant Projects",
  "projects.details": "The projects included in this portfolio represent a selection of the most significant experiences and skills acquired throughout my career. Expand the accordions for more information. You can view them live by clicking the Live link!",
  "projects.disclaimer": "Live projects are hosted on Render using a free plan. Due to limited resources, the initial load may require one or two refreshes to display data correctly. Thanks for your patience!",

  "projects.readme": "Readme file:",
  "projects.repo": "GitHub repository:",
  "projects.live": "Live execution:",
  "projects.technologies": "Technologies used:",
  "projects.description": "Description:",
  "projects.note": "NOTE:",
  "projects.technicalNotes": "Technical Notes",

  "project1.name": "Application Context: ToDoList",
  "project1.description.short": "Introduction to the multi-user task management system and the engineering goals of the portfolio.",
  "project1.description.line1": "The portfolio revolves around the development of a shared task management system, designed to support multiple users and collaborative workflows. The application scenario is that of an advanced ToDoList, where each task can transition through distinct states and involve multiple actors, with dynamic filtering and visualization logic.",
  "project1.description.line2": "The included projects explore various architectural solutions and technologies, aiming to compare approaches and ensure consistency between frontend and backend. The entire journey was conceived as an engineering exercise, with a focus on modularity, maintainability, and code clarity.",

  "project2.name": "Data Model and Relational Structure",
  "project2.description.short": "Relational schema with user and task entities, and state management.",
  "project2.description.line1": "The system is based on two main entities: User and Task, linked by a one-to-many relationship through the assigneeId field. Each user can be in a state of either ACTIVE or BLOCKED, while tasks can be in one of the following states: TODO, IN PROGRESS, PAUSED, DONE.",
  "project2.description.line2": "The structure is designed to support collaborative workflows and dynamic filtering, with referential integrity constraints and automatic primary key management.",
  "project2.description.line3": "The database is implemented in PostgreSQL and serves as the shared foundation for all frontend and backend variants of the project.",

  "project3.name": "Shared UI Library",
  "project3.description.short": "Reusable components, styles, and logic for consistent and modular frontends.",
  "project3.description.line1": "The UI Kit project provides a shared library of React components, global styles, and TypeScript types, used by both the Next.js frontend and the Storybook validation environment.",
  "project3.description.line2": "It includes a suite of hooks for language switching, theme control, responsive visibility, and field validation, ensuring consistent and configurable behavior. The centralized validation system provides coherent feedback across all controls and automatic save disabling, with customizable rules and contextual messages.",

  "project4.name": "Storybook Environment for UI Testing and Documentation",
  "project4.description.short": "Interactive visualization and validation of shared components.",
  "project4.description.line1": "Storybook serves as a validation environment for layout, accessibility, and visual consistency, facilitating direct collaboration between designers and developers. It also generates detailed documentation on component usage.",
  "project4.description.line2": "Interactive stories allow each component to be explored in isolation, testing behaviors, variants, and edge cases in a complete and controlled manner.",
  "project4.note1": "To ensure compatibility between workspaces and Storybook plugins, the project uses Yarn 1.22.19 with a local shim. This choice was necessary due to structural limitations in npm and critical incompatibilities with Yarn Berry (v2+), which prevented correct dependency resolution and module linking. The explicit lock guarantees stability in build and development workflows.",

  "project5.name": "Next.js Frontend Implementation",
  "project5.description.short": "Multilingual and themeable application for user and task management.",
  "project5.description.line1": "The Next.js interface offers full management of users and tasks, including creation, editing, deletion, and control of roles and states. The advanced validation system prevents unauthorized transitions, such as assigning IN PROGRESS tasks to blocked users.",
  "project5.description.line2": "The theme is selectable among three options (midnight, skyline, sunleaf), and the language can be dynamically switched between Italian and English.",
  "project5.description.line3": "The frontend integrates Redux Toolkit and TanStack Query for efficient state and asynchronous call management.",
  "project5.description.line4": "The landing page is a Dashboard that highlights the status of tasks and users, active assignments, and visual relationships between elements, offering an interactive and up-to-date overview.",
  "project5.note1": "The app uses a shared UI Kit with reusable components, hooks, and providers to ensure visual and behavioral consistency. The preferencies are keeped inside a localStorage.",
  "project5.note2": "Compatibility with Storybook is ensured by the same local Yarn 1.22.19 shim, necessary to maintain consistency across environments and shared tooling.",

  "project6.name": "AngularJS + Redux Frontend Implementation",
  "project6.description.short": "Frontend interface built with AngularJS and Redux-classic.",
  "project6.description.line1": "The AngularJS frontend implements a TodoList with dual filtering: server-side for large datasets and client-side via Redux Classic. The interface is built with Bootstrap and SCSS, offering simple theming and a responsive visual structure.",
  "project6.description.line2": "This project predates the Next.js version, which introduced the PAUSED state. To maintain compatibility with the initial workflow, all tasks in this state are displayed as IN PROGRESS.",
  "project6.note1": "To enable caching in filter application, Redux Classic was introduced to maintain state in line with React applications.",
  "project6.note2": "To reuse modal code, the HTML content was inserted directly within the tag, following an approach similar to React’s $children property for populating content.",

  "project7.name": ".NET Backend Implementation",
  "project7.description.short": "API layer for managing a minimal database with User and Task entities. Accessible via Swagger.",
  "project7.description.line1": "Minimal ASP.NET implementation of the APIs required for the TodoList project, with documentation and testing available on the Swagger page.",
  "project7.description.line2": "Scaffolding was generated with Entity Framework from the database and includes the User and Task entities, providing the necessary methods to perform CRUD operations.",
  "project7.description.line3": "Task search supports filtering by description (like), assignee, and an array of desired states. Similar filters are available for users.",

  "project8.name": "Portfolio Implementation",
  "project8.description.short": "Insights and curiosities about the development of this very site.",
  "project8.description.line1": "The portfolio was built by reusing legacy frontend code originally written in AngularJS. The technologies involved are limited to HTML, Bootstrap, SCSS, and a generous dose of vanilla JavaScript.",
  "project8.description.line2": "From the beginning, a mobile-first approach was adopted, designing two layouts toggled via media queries to achieve optimal display based on the viewport. This system, successfully tested in the Profile section, was initially applied to the project implementations as well, which at the time included only be-csharp and fe-angularjs.",
  "project8.description.line3": "When new projects had to be integrated, it became clear that maintaining such HTML duplication would lead to a maintenance nightmare. An algorithmic approach was therefore adopted, delegating element injection to JavaScript through direct DOM manipulation."
}
